<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="API_Payroll_SmokeTest" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <com.paylocity.stormbreakerplugins.config.PaylocityArguments guiclass="com.paylocity.stormbreakerplugins.config.PaylocityArgumentsPanel" testclass="com.paylocity.stormbreakerplugins.config.PaylocityArguments" testname="Paylocity User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="FW_Login_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Login_Url</stringProp>
            <stringProp name="Argument.value">bronzelogin.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Sb_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Sb_Url</stringProp>
            <stringProp name="Argument.value">bronzesb.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Mobile_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Mobile_Url</stringProp>
            <stringProp name="Argument.value">bronzemobile.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Ob_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Ob_Url</stringProp>
            <stringProp name="Argument.value">bronzeob.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Obsb_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Obsb_Url</stringProp>
            <stringProp name="Argument.value">bronzeobsb.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Ess_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Ess_Url</stringProp>
            <stringProp name="Argument.value">bronzeess.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Webtime2_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Webtime2_Url</stringProp>
            <stringProp name="Argument.value">bronzewebtime2.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Access_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Access_Url</stringProp>
            <stringProp name="Argument.value">bronzeaccess.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Accesssb_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Accesssb_Url</stringProp>
            <stringProp name="Argument.value">bronzeaccesssb.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_App_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_App_Url</stringProp>
            <stringProp name="Argument.value">bronzeapp.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Appsb_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Appsb_Url</stringProp>
            <stringProp name="Argument.value">bronzeappsb.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Cdn_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Cdn_Url</stringProp>
            <stringProp name="Argument.value">bronzecdn.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Gw_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Gw_Url</stringProp>
            <stringProp name="Argument.value">bronzegw.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Learning_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Learning_Url</stringProp>
            <stringProp name="Argument.value">bronzelearning.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Positions_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Positions_Url</stringProp>
            <stringProp name="Argument.value">bronzepositions.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Surveys_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Surveys_Url</stringProp>
            <stringProp name="Argument.value">bronzesurveys.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Talent_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Talent_Url</stringProp>
            <stringProp name="Argument.value">bronzetalent.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Weblink_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Weblink_Url</stringProp>
            <stringProp name="Argument.value">bronzeweblink.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Weblinksb_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Weblinksb_Url</stringProp>
            <stringProp name="Argument.value">bronzeweblinksb.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Provider_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Provider_Url</stringProp>
            <stringProp name="Argument.value">bronzeprovider.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="FW_Benefits_Url" elementType="Argument">
            <stringProp name="Argument.name">FW_Benefits_Url</stringProp>
            <stringProp name="Argument.value">bronzebenefits.qa.paylocity.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </com.paylocity.stormbreakerplugins.config.PaylocityArguments>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">true</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value"> Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:48.0) Gecko/20100101 Firefox/48.0</stringProp>
          </elementProp>
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value"> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
          </elementProp>
          <elementProp name="Accept-Language" elementType="Header">
            <stringProp name="Header.name">Accept-Language</stringProp>
            <stringProp name="Header.value"> fr,en-US;q=0.7,en;q=0.3</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value"> gzip, deflate</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Api_Payroll_PayrollCalcApi_Scenario" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1373789594000</longProp>
        <longProp name="ThreadGroup.end_time">1373789594000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="connectionProperties"></stringProp>
          <stringProp name="dataSource">payrollCalcAPIDB</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://tinamlist</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">EscherQA</stringProp>
          <stringProp name="poolMax">0</stringProp>
          <boolProp name="preinit">false</boolProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">EscherQA</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While (needLogout==false)" enabled="true">
          <stringProp name="WhileController.condition">${__javaScript(vars.get(&quot;needLogout&quot;) == &quot;false&quot;)}</stringProp>
          <stringProp name="TestPlan.comments">All Webtest will be inside the While Loop - Please do not change this</stringProp>
        </WhileController>
        <hashTree>
          <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randLoopProbability" enabled="true">
            <stringProp name="variableName">randLoopProbability</stringProp>
            <stringProp name="outputFormat"></stringProp>
            <stringProp name="minimumValue">0</stringProp>
            <stringProp name="maximumValue">100</stringProp>
            <stringProp name="randomSeed"></stringProp>
            <boolProp name="perThread">true</boolProp>
          </RandomVariableConfig>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set needLogout" enabled="true">
            <stringProp name="TestPlan.comments">only 22% of tests got logout</stringProp>
            <stringProp name="BeanShellSampler.query">if (Integer.parseInt(vars.get(&quot;randLoopProbability&quot; )) &gt;= 0)
{
	vars.put(&quot;needLogout&quot;, &quot;true&quot;);
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Throughput Controller - 100%" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <FloatProperty>
              <name>ThroughputController.percentThroughput</name>
              <value>100.0</value>
              <savedValue>0.0</savedValue>
            </FloatProperty>
          </ThroughputController>
          <hashTree>
            <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </ConfigTestElement>
            <hashTree/>
          </hashTree>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Reset needLogout" enabled="true">
          <stringProp name="TestPlan.comments">Please do not change</stringProp>
          <stringProp name="BeanShellSampler.query">vars.put(&quot;needLogout&quot;, &quot;false&quot;);

</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <com.paylocity.stormbreakerplugins.config.ProvisionedUserDataSet guiclass="TestBeanGUI" testclass="com.paylocity.stormbreakerplugins.config.ProvisionedUserDataSet" testname="Provisioned User Config" enabled="true">
          <stringProp name="environment"></stringProp>
          <stringProp name="primaryApplicationName"></stringProp>
          <stringProp name="ssoApplicationName"></stringProp>
          <stringProp name="primaryPurpose"></stringProp>
          <stringProp name="primaryRole"></stringProp>
          <stringProp name="ssoPurpose"></stringProp>
          <stringProp name="ssoRole"></stringProp>
          <stringProp name="provisioningAlias"></stringProp>
          <stringProp name="apiGatewayValue"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <stringProp name="TestPlan.comments">We need to add here what kind of users we want to test</stringProp>
        </com.paylocity.stormbreakerplugins.config.ProvisionedUserDataSet>
        <hashTree/>
        <Arguments guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="needLogout" elementType="HTTPArgument">
              <boolProp name="HTTPArgument.always_encode">false</boolProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <boolProp name="HTTPArgument.use_equals">true</boolProp>
              <stringProp name="Argument.name">needLogout</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="randLoopProbability" enabled="true">
          <stringProp name="variableName">randLoopProbability</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="maximumValue">100</stringProp>
          <stringProp name="randomSeed"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="TestPlan.comments">Please do not shncge</stringProp>
        </RandomVariableConfig>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="TestPlan.comments">For scripting only</stringProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="paylocityInfluxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">paylocityInfluxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">com.paylocity.stormbreakerplugins.visualizers.PaylocityHttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">${__P(InfluxUrl, http://localhost:8086)}/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">Stormbreaker</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">${__P(ExecutionLoadTestId, 00000000-0000-0000-0000-000000000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">50;90;95</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Multi_Api_SmokeTest</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value">${__P(ExecutionLoadTestId, 00000000-0000-0000-0000-000000000000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">com.paylocity.stormbreakerplugins.visualizers.PaylocityInfluxdbBackendListenerClient</stringProp>
        <stringProp name="TestPlan.comments">Automatically added by Stormbreaker</stringProp>
      </BackendListener>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">log_resultsValidation.csv</stringProp>
        <stringProp name="TestPlan.comments">For loac run only</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
